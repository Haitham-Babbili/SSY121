{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 HelveticaNeue-Bold;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red4\green4\blue4;\red247\green247\blue247;\red0\green0\blue0;
\red10\green9\blue26;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c1176\c1176\c1176;\cssrgb\c97647\c97647\c97647;\cssrgb\c0\c0\c0;
\cssrgb\c3922\c3922\c13725;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11860\viewh9860\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb3 \expnd0\expndtw0\kerning0
Today we will learn\
1. How to download and install git\
2. Signup and create account on GitHub\
3. Add a project/folder/file to git\
4. Track and commit changes\
5. Add the repository to GitHub\
______________________________________\
Step 1 - Check if git is already installed: {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/watch?v=0Icla6TVNNo&t=32s"}}{\fldrslt \cf4 0:32}}\
Step 2 - Download and install git: {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/watch?v=0Icla6TVNNo&t=112s"}}{\fldrslt \cf4 1:52}}\
Step 3 - Signup and create an account on GitHub: {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/watch?v=0Icla6TVNNo&t=220s"}}{\fldrslt \cf4 3:40}}\
Step 4 - Add your GitHub email and username to git: {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/watch?v=0Icla6TVNNo&t=290s"}}{\fldrslt \cf4 4:50}}\
Step 5 - Add file/folders to git - tracking: {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/watch?v=0Icla6TVNNo&t=404s"}}{\fldrslt \cf4 6:44}}\
Step 6 - Commands: {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/watch?v=0Icla6TVNNo&t=523s"}}{\fldrslt \cf4 8:43}}\
\
Step 1 : Check if git is already installed.\
  terminal - git --version\
\
Step 2 : Download and install git\
  {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbmUyaGRBdUFSUTNrZmQ0V084Mzg4THB2SGZ2QXxBQ3Jtc0tsMnBsZVRmLW1zN1NNdzV0UlFNMUdmbmFVNk1XV2cxbEVnY18zNUtweDkyM2JHSGtVcEZQRTVZT19XM2RrRVNyMDc3bFBOQmtkbndSUkdYeFJ5dVUtYktDOHdJWnV2cTFQYVVQel9EdUJES244LWxJdw&q=https%3A%2F%2Fgit-scm.com%2Fdownload%2Fmac"}}{\fldrslt \cf4 https://git-scm.com/download/mac}}\
\
Step 3 : Signup and create a account on GitHub\
  {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa29ZV0Z5b09fUVF1WGFaa01PYmhXd0I1dHZtZ3xBQ3Jtc0tsZlZKR2dNT2dLWENVRkdZN2RlWGhYNkc3SlgtU2NZc0owS1A2ZlQ0VEhKdUh3RDlEWndON2hVRGdLZXRMVGVFdzdRZEk4UHJPcC1JamJFdmkwelBRNGFSc0xhUDNjb1FPN0hjWmFuTTVpVGZPMG9lcw&q=https%3A%2F%2Fgithub.com%2F"}}{\fldrslt \cf4 https://github.com/}}\
\
Step 4 : Add your github email and username to git\
  git config --global user.email "yourGitHub@email.com"\
  git config --global user.name "yourGitHubusername"\
\
\
Step 5 : Add file/folders to git - tracking\
\
Step 6 : Commands\
   - terminal - goto the location of the folder/project\
   - git init\
   - git status\
   - git add\
   - git commit -m \'93\'85..\'94\
   - git remote add origin \'93location of remote repo\'94\
   - git push -u origin master\
   - git log\
   - git --help\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
Today we will learn\
1. How to enable git commands autocomplete feature on mac os\
2. How to enable git commands color features on mac os\
____________________________________________________\
\
For autocomplete\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Step 1 :  go to terminal\
        put git-completion.bash script in your home directory\
curl {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3dvZWxuMGFIejdmMFYyY1RZNE5xTGROZVJKZ3xBQ3Jtc0tuNjVuZTFZOVBITjQ4SFduQ3l5LV9RNVVES05rSW92QTE5Sm9zRjZ6Sy1vbnpvNGdUMlppRENjMjhUVFJnRExQdWJUeUJGWHc1Sjh5dk8zZDRfMHU1Q1ByenVHdjNxVlJJMTRGekRfMDZpM2RTeW5faw&q=https%3A%2F%2Fraw.githubusercontent.com%2Fgit%2Fgit%2Fmaster%2Fcontrib%2Fcompletion%2Fgit-completion.bash"}}{\fldrslt \cf4 https://raw.githubusercontent.com/git...}} -o ~/.git-completion.bash\
\
\
Step 2 : Add following line to your .bash_profile. \
       This tells bash to run git autocomplete script if it exists\
\
vi ~/.bash_profile\
\
if [ -f ~/.git-completion.bash ]; then\
  . ~/.git-completion.bash\
fi\
\
\
For enabling git colors\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
Step 1 : check if colouring is already enabled\
  terminal - git config color.ui\
\
Step 2 : enable colouring \
  git config --global color.ui true\
\
\
\
\
\pard\pardeftab720\partightenfactor0

\f1\b \AppleTypeServices \cf5 \cb6 \outl0\strokewidth0 \strokec5 https://www.freecodecamp.org/news/10-important-git-commands-that-every-developer-should-know/\
\
ANUARY 19, 2020\cb1 \
\cb6 /\cb1 \
{\field{\*\fldinst{HYPERLINK "https://www.freecodecamp.org/news/tag/git/"}}{\fldrslt \cb6 #GIT}}\cb6 \
\cb1 \
\pard\pardeftab720\partightenfactor0

\fs120 \cf5 \cb6 10 Git Commands Every Developer Should\'a0Know\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b0\fs30 \cf5 {{\NeXTGraphic Ekran-Resmi-2019-08-01-12.13.08.png \width17440 \height23560 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.freecodecamp.org/news/author/cemeygi/"}}{\fldrslt 
\f1\b\fs40 \cf5 \cb6 Cem Eygi}}
\fs48 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf5 {{\NeXTGraphic Ekran-Resmi-2020-01-12-21.59.37.png \width17200 \height9500 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa825\partightenfactor0

\fs55 \cf5 \cb6 Git is an important part of daily programming (especially if you're working with a team) and is widely used in the software industry.\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\fs44 \cf5 \cb6 Since there are many various commands you can use, mastering Git takes time. But some commands are used more frequently (some daily). So in this post, I will share and explain the 10 most used Git commands that every developer should know.\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b \cf5 \cb6 Note: To understand this article, you need to know the basics of Git.
\f2\b0 \cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 1. Git\'a0clone\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 Git clone is a command for downloading existing source code from a remote repository (like Github, for example). In other words, Git clone basically makes an identical copy of the latest version of a project in a repository and saves it to your computer.\cb1 \
\cb6 There are a couple of ways to download the source code, but mostly I prefer the\'a0
\f1\b clone with https
\f2\b0 \'a0way:\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git clone <https://name-of-the-repository-link>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\fs44 \cf5 \cb6 For example, if we want to download a project from Github, all we need to do is click on the green button (clone or download), copy the URL in the box and paste it after the git clone command that I've shown right above.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic resim-4.png \width19200 \height5760 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\qc\partightenfactor0

\f1\b\fs35\fsmilli17600 \cf5 \cb6 Bootstrap source code example from Github
\f2\b0 \cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\fs44 \cf5 \cb6 This will make a copy of the project to your local workspace so you can start working with it.\cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 2. Git\'a0branch\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 Branches are highly important in the git world. By using branches, several developers are able to work in parallel on the same project simultaneously. We can use the git branch command for creating, listing and deleting branches.\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b \cf5 \cb6 Creating a new branch:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git branch <branch-name>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\fs44 \cf5 \cb6 This command will create a branch\'a0
\f1\b locally
\f2\b0 . To push the new branch into the remote repository, you need to use the following command:\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git push -u <remote> <branch-name>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 Viewing branches:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git branch or git branch --list\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 Deleting a branch:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git branch -d <branch-name>\cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 3. Git\'a0checkout\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 This is also one of the most used Git commands. To work in a branch, first you need to switch to it. We use\'a0
\f1\b git checkout
\f2\b0 \'a0mostly for switching from one branch to another. We can also use it for checking out files and commits.\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git checkout <name-of-your-branch>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\fs44 \cf5 \cb6 There are some steps you need to follow for successfully switching between branches:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa220\partightenfactor0
\ls1\ilvl0\cf5 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 The changes in your current branch must be committed or stashed before you switch\cb1 \
\ls1\ilvl0\cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 The branch you want to check out should exist in your local\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b \cf5 \cb6 There is also a shortcut command that allows you to create and switch to a branch at the same time:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git checkout -b <name-of-your-branch>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\fs44 \cf5 \cb6 This command creates a new branch in your local (-b stands for branch) and checks the branch out to new right after it has been created.\cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 4. Git\'a0status\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 The Git status command gives us all the necessary information about the current branch.\'a0\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git status\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\fs44 \cf5 \cb6 We can gather information like:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa220\partightenfactor0
\ls2\ilvl0\cf5 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Whether the current branch is up to date\cb1 \
\ls2\ilvl0\cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Whether there is anything to commit, push or pull\cb1 \
\ls2\ilvl0\cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Whether there are files staged, unstaged or untracked\cb1 \
\ls2\ilvl0\cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Whether there are files created, modified or deleted\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic resim-5.png \width19200 \height7400 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\qc\partightenfactor0

\f1\b\fs35\fsmilli17600 \cf5 \cb6 Git status gives information about the branch &\'a0files
\f2\b0 \cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 5. Git\'a0add\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 When we create, modify or delete a file, these changes will happen in our local and won't be included in the next commit (unless we change the configurations).\cb1 \
\cb6 We need to use the git add command to include the changes of a file(s) into our next commit.\'a0\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b \cf5 \cb6 To add a single\'a0file:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git add <file>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 To add everything at\'a0once:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git add -A\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\fs44 \cf5 \cb6 When you visit the screenshot above in the 4th section, you will see that there are file names that are red - this means that they're unstaged files. The unstaged files won't be included in your commits.\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b \cf5 \cb6 To include them, we need to use git\'a0add:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic resim-6.png \width19200 \height4900 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\qc\partightenfactor0

\f1\b\fs35\fsmilli17600 \cf5 \cb6 Files with green are now staged with git\'a0add
\f2\b0 \cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 Important: The git add command doesn't change the repository and the changes are not saved until we use git commit.
\f2\b0 \cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 6. Git\'a0commit\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 This is maybe the most-used command of Git. Once we reach a certain point in development, we want to save our changes (maybe after a specific task or issue).\cb1 \
\cb6 Git commit is like setting a checkpoint in the development process which you can go back to later if\'a0needed.\cb1 \
\cb6 We also need to write a short message to explain what we have developed or changed in the source code.\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git commit -m "commit message"\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 Important: Git commit saves your changes only locally.
\f2\b0 \cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 7. Git\'a0push\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 After committing your changes, the next thing you want to do is send your changes to the remote server. Git push uploads your commits to the remote repository.\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git push <remote> <branch-name>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\fs44 \cf5 \cb6 However, if your branch is newly created, then you also need to upload the branch with the following command:\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git push --set-upstream <remote> <name-of-your-branch>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\fs44 \cf5 \cb6 or\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git push -u origin <branch_name>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 Important: Git push only uploads changes that are committed.
\f2\b0 \cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 8. Git\'a0pull\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 The\'a0
\f1\b git pull\'a0
\f2\b0 command is used to get updates from the remote repo. This command is a combination of\'a0
\f1\b git fetch
\f2\b0 \'a0and\'a0
\f1\b git merge
\f2\b0 \'a0which means that, when we use git pull, it gets the updates from remote repository (git fetch) and immediately applies the latest changes in your local (git merge).\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git pull <remote>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 This operation may cause conflicts that you need to solve manually.
\f2\b0 \cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 9. Git\'a0revert\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 Sometimes we need to undo the changes that we've made. There are various ways to undo our changes locally or remotely (depends on what we need), but we must carefully use these commands to avoid unwanted deletions.\cb1 \
\cb6 A safer way that we can undo our commits is by using\'a0
\f1\b git revert
\f2\b0 . To see our commit history, first we need to use\'a0
\f1\b git log\uc0\u8202 --\u8202 oneline:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic resim.png \width17920 \height1620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\qc\partightenfactor0

\f1\b\fs35\fsmilli17600 \cf5 \cb6 commit history of my master\'a0branch
\f2\b0 \cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\fs44 \cf5 \cb6 Then we just need to specify the hash code next to our commit that we would like to undo:\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git revert 3321844\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\fs44 \cf5 \cb6 After this, you will see a screen like below - just press\'a0
\f1\b shift + q
\f2\b0 \'a0to exit:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic resim-2.png \width19200 \height11620 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa660\partightenfactor0
\cf5 \cb6 The Git revert command will undo the given commit, but will create a new commit without deleting the older one:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic resim-3.png \width18920 \height2400 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\qc\partightenfactor0

\f1\b\fs35\fsmilli17600 \cf5 \cb6 new "revert" commit
\f2\b0 \cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\fs44 \cf5 \cb6 The advantage of using\'a0
\f1\b git revert
\f2\b0 \'a0is that it doesn't touch the commit history. This means that you can still see all of the commits in your history, even the reverted ones.\'a0\cb1 \
\cb6 Another safety measure here is that everything happens in our local system unless we push them to the remote repo. That's why git revert is safer to use and is the preferred way to undo our commits.\cb1 \
\pard\pardeftab720\sa172\partightenfactor0

\f3\b\fs86\fsmilli43200 \cf5 \cb6 10. Git\'a0merge\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf5 \cb6 When you've completed development in your branch and everything works fine, the final step is merging the branch with the parent branch (dev or master). This is done with the\'a0
\f4\fs35\fsmilli17600 git merge
\f2\fs44 \'a0command.\cb1 \
\cb6 Git merge basically integrates your feature branch with all of its commits back to the dev (or master) branch. It's important to remember that you first need to be on the specific branch that you want to merge with your feature branch.\cb1 \
\cb6 For example, when you want to merge your feature branch into the dev branch:\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b \cf5 \cb6 First you should switch to the dev branch:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git checkout dev\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 Before merging, you should update your local dev branch:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git fetch\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 Finally, you can merge your feature branch into dev:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\fs33\fsmilli16800 \cf5 \cb6 git merge <branch-name>\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b\fs44 \cf5 \cb6 Hint: Make sure your dev branch has the latest version before you merge your branches, otherwise you may face conflicts or other unwanted problems.
\f2\b0 \cb1 \
\pard\pardeftab720\sa660\partightenfactor0
\cf5 \cb6 So these are my 10 most-used git commands that I come across in my daily programming. There are many more things to learn about Git and I will explain them later in separate articles.\cb1 \
\pard\pardeftab720\sa660\partightenfactor0

\f1\b \cf5 \cb6 If you want to learn more about web development, feel free to\'a0{\field{\*\fldinst{HYPERLINK "https://www.youtube.com/channel/UC1EgYPCvKCXFn8HlpoJwY3Q"}}{\fldrslt \ul follow me on Youtube}}!
\f2\b0 \cb1 \
\pard\pardeftab720\sa660\partightenfactor0
\cf5 \cb6 Thank you for reading!\cb1 \
}